#!/usr/bin/env node
/**
 * DO NOT EDIT THIS FILE DIRECTLY.
 * This file is generated following the conversion of 
 * @see [./index.cjs]{@link ./index.cjs}
 * 
 **/
import minimist  from "minimist";
import {displayError, displayLog, cloneFromCLI, displayHelpFile}  from "./src/clonefile.mjs";
import {SKIP_MESSAGE}  from "./src/constants.mjs";


const argv = minimist(process.argv.slice(2), {boolean: ["silent", "force"]});
let packageJson = {
  "version": "3.5.0"
};



const init = async () =>
{
    try
    {
        const silent = !!argv.silent;

        if (argv.hasOwnProperty("verbose"))
        {
            displayLog(`The option "--verbose" is deprecated. Use --silent instead`, {fg: "orange", silent});
        }

        if (argv.hasOwnProperty("overwrite"))
        {
            displayLog(`The option "--overwrite" is deprecated. Use --force instead`, {fg: "orange"});
            argv.force = argv.force || argv.overwrite;
        }

        if (argv.hasOwnProperty("recursive"))
        {
            displayLog(`The option "--recursive" is deprecated. Use --force instead`, {fg: "orange"});
            argv.force = argv.force || argv.recursive;
        }

        // --------------------
        // Version and help
        // --------------------
        if (argv.v || argv.version)
        {
            console.log(packageJson.version);
            return;
        }

        if (argv.h || argv.help)
        {
            await displayHelpFile();
            return;
        }

        if (argv.force)
        {
            argv.recursive = true;
            argv.overwrite = true;
        }

        let {count, message} = cloneFromCLI(argv);

        process.exitCode = process.exitCode || 0;

        if (message === SKIP_MESSAGE)
        {
            return;
        }

        if (!argv.silent)
        {
            message = message || `${count} ${count === 1 ? "item" : "items"} cloned`;
            displayLog(``.padEnd(message.length, "-"), {fg: "orange"});
            displayLog(message, {fg: "orange"});
        }

        return;
    }
    catch (e)
    {
        console.error(e.message);
    }

    process.exitCode = process.exitCode || 1;
};

init().then(() => true).catch(e => displayError(e));